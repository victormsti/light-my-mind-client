{"version":3,"sources":["logo.svg","services/auth.js","services/api.js","pages/main/index.js","pages/login/styles.js","pages/login/index.js","pages/new-reminder/index.js","pages/reminder/index.js","pages/signup/styles.js","pages/signup/index.js","routes.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","isAuthenticated","localStorage","getItem","getUserId","login","token","setItem","logout","removeItem","userId","id","api","Axios","create","baseURL","interceptors","request","use","a","config","headers","Authorization","Main","state","reminders","reminderInfo","page","loadReminders","get","response","data","docs","setState","prevPage","pageNumber","nextPage","pages","deleteReminder","delete","window","location","reload","error","this","className","to","map","reminder","key","_id","title","description","onClick","e","disabled","Component","Container","styled","div","Form","form","SignIn","email","password","handleSignIn","preventDefault","post","props","history","push","onSubmit","src","Logo","alt","type","placeholder","onChange","target","value","withRouter","Reminder","period","hour","createReminder","match","params","createdAt","SignUp","username","handleSignUp","console","log","PrivateRoute","component","rest","render","pathname","from","Routes","exact","path","Login","NewReminder","loggedIn","doLogout","createHashHistory","App","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.26ab751a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.590825e3.svg\";","export const TOKEN_KEY = \"token-key\";\nexport const USER_ID = \"user-id\";\nexport const isAuthenticated = () => localStorage.getItem(TOKEN_KEY) !== null;\nexport const getToken = () => localStorage.getItem(TOKEN_KEY);\nexport const getUserId = () => localStorage.getItem(USER_ID);\nexport const login = token => {\n  localStorage.setItem(TOKEN_KEY, token);\n};\nexport const logout = () => {\n  localStorage.removeItem(TOKEN_KEY);\n  localStorage.removeItem(USER_ID);\n};\nexport const userId = id => {\n  localStorage.setItem(USER_ID, id);\n};\n","import Axios from 'axios';\nimport { getToken } from \"./auth\";\n\n//const api = Axios.create({baseURL : 'http://localhost:3000/api'});\nconst api = Axios.create({baseURL : 'https://light-my-mind-server.herokuapp.com/api'});\napi.interceptors.request.use(async config => {\n    const token = getToken();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  });\n\n  \nexport default api;","import React, {Component} from 'react';\n\nimport api from '../../services/api';\nimport { getUserId } from \"../../services/auth\";\n\nimport {Link} from 'react-router-dom';\n\nimport './styles.css';\n\nexport default class Main extends Component{\n\n    state = {\n        reminders : [],\n        reminderInfo: {},\n        page: 1,\n        userId: getUserId()\n    };\n\n    componentDidMount(){\n        this.loadReminders();\n    };\n\n    loadReminders = async (page = 1) =>{\n        const {userId} = this.state;\n\n        const response = await api.get(`/reminders/users/id/${userId}?page=${page}`);\n\n        const {docs, ...reminderInfo} = response.data;\n\n        this.setState({reminders: docs, reminderInfo, page});\n    };\n\n    prevPage = () => {\n        const {page} = this.state;\n\n        if(page ===1) return;\n\n        const pageNumber = page - 1;\n\n        this.loadReminders(pageNumber);\n    }\n\n    nextPage = () => {\n        const {page, reminderInfo} = this.state;\n\n        if(page === reminderInfo.pages) return;\n\n        const pageNumber = page + 1;\n\n        this.loadReminders(pageNumber);\n    }\n\n    deleteReminder = async (id) => {\n          try {\n            await api.delete(`/reminders/${id}`);\n            window.location.reload(false);\n          } catch (err) {\n            this.setState({\n              error:\n                err\n            });\n          }\n      };\n\n    render(){\n        const {reminders, page, reminderInfo} = this.state;\n        return (\n            <div className=\"reminder-list\">\n                <div className=\"button-insert\">\n                <Link to={'/reminders/new-reminder'}>Insert New Reminder</Link>\n                </div>\n                {reminders.map(reminder => (\n                    <article key={reminder._id}>\n                        <strong>{reminder.title}</strong>\n                <p>{reminder.description}</p>\n                \n                <div id=\"actions-button\">\n                    <Link to={`/reminders/${reminder._id}`}>Access</Link>\n                    <button id=\"delete-button\" onClick={(e) => this.deleteReminder(reminder._id)} \n                            key={reminder._id}>Delete</button>\n                </div>\n                    </article>\n        ))}\n        \n            <div className=\"actions\">\n                <button disabled={page ===1} onClick={this.prevPage}>Previous</button>\n                <button disabled={page === reminderInfo.pages} onClick={this.nextPage}>Next</button> \n            </div>\n        </div>\n        );\n    }\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n`;\n\nexport const Form = styled.form`\n  width: 400px;\n  background: #fff;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  img {\n    width: 100px;\n    margin: 10px 0 40px;\n  }\n  p {\n    color: #ff3333;\n    margin-bottom: 15px;\n    border: 1px solid #ff3333;\n    padding: 10px;\n    width: 100%;\n    text-align: center;\n  }\n  input {\n    flex: 1;\n    height: 46px;\n    margin-bottom: 15px;\n    padding: 0 20px;\n    color: #777;\n    font-size: 15px;\n    width: 100%;\n    border: 1px solid #ddd;\n    &::placeholder {\n      color: #999;\n    }\n  }\n  button {\n    color: #fff;\n    font-size: 16px;\n    background: #6b5b95;\n    height: 56px;\n    border: 0;\n    border-radius: 5px;\n    width: 100%;\n  }\n\n  button:hover {\n    cursor: pointer\n  }\n  \n  hr {\n    margin: 20px 0;\n    border: none;\n    border-bottom: 1px solid #cdcdcd;\n    width: 100%;\n  }\n  a {\n    font-size: 16;\n    font-weight: bold;\n    color: #999;\n    text-decoration: none;\n  }\n`;","import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nimport Logo from \"../../logo.svg\";\nimport api from \"../../services/api\";\nimport { login, userId } from \"../../services/auth\";\n\nimport { Form, Container } from \"./styles\";\n\nclass SignIn extends Component {\n  state = {\n    email: \"\",\n    password: \"\",\n    error: \"\"\n  };\n\n  handleSignIn = async e => {\n    e.preventDefault();\n    const { email, password } = this.state;\n    if (!email || !password) {\n      this.setState({ error: \"Fill all inputs to continue\" });\n    } else {\n      try {\n        const response = await api.post(\"/auth\", { email, password });\n        login(response.data.token);\n        userId(response.data.userId);\n        this.props.history.push(\"/main\");\n        window.location.reload(false);\n      } catch (err) {\n        this.setState({\n          error:\n            'Invalid Login'\n        });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <Container>\n        <Form onSubmit={this.handleSignIn}>\n          <img src={Logo} alt=\"logo\" />\n          {this.state.error && <p>{this.state.error}</p>}\n          <input\n            type=\"email\"\n            placeholder=\"E-mail address\"\n            onChange={e => this.setState({ email: e.target.value })}\n          />\n          <input\n            type=\"password\"\n            placeholder=\"Password\"\n            onChange={e => this.setState({ password: e.target.value })}\n          />\n          <button type=\"submit\">Login</button>\n          <hr />\n          <Link to=\"/signup\">SignUp for Free</Link>\n        </Form>\n      </Container>\n    );\n  }\n}\n\nexport default withRouter(SignIn);","import React, {Component} from 'react';\nimport api from '../../services/api';\nimport { getUserId } from \"../../services/auth\";\nimport './styles.css';\n\nexport default class Reminder extends Component{\n    state = {\n        error: \"\",\n        title: \"\",\n        description: \"\",\n        period: \"\",\n        hour: \"\",\n        userId: getUserId()\n    }\n\n    createReminder = async e => {\n        e.preventDefault();\n        const { title, description, period, hour, userId } = this.state;\n        if (!title || !description || !period || !hour) {\n          this.setState({ error: \"Fill all inputs to create a new reminder\" });\n        } else {\n          try {\n            await api.post(\"/reminders\", { title, description,\n            period, hour, userId });\n            this.props.history.push(\"/main\");\n            window.location.reload(false);\n          } catch (err) {\n            this.setState({\n              error:\n                err\n            });\n          }\n        }\n      };\n    \n    render(){\n        return (\n            <form onSubmit={this.createReminder}>\n            <div className=\"reminder-info\">\n                <h1>New Reminder</h1>\n                {this.state.error && <p id=\"error-msg\">{this.state.error}</p>}\n                <br></br>\n                <p><strong>Title: </strong>\n                    <input\n                        type=\"text\" \n                        placeholder=\"Type the title here...\"\n                        onChange={e => this.setState({ title: e.target.value })}\n                    ></input>\n                </p>\n                <p><strong>Description: </strong>\n                    <textarea \n                        placeholder=\"Type a description here...\"\n                        onChange={e => this.setState({ description: e.target.value })}\n                    ></textarea>\n                </p>\n                <p><strong>Period: </strong> \n                    <input \n                        type=\"text\" \n                        placeholder=\"Daily\"\n                        onChange={e => this.setState({ period: e.target.value })}\n                    ></input>\n                </p>\n                <p><strong>Hour of Day: </strong> \n                    <input \n                        type=\"time\" \n                        onChange={e => this.setState({ hour: e.target.value })}\n                    ></input>\n                </p>\n                <button type=\"submit\">Create</button>\n            </div>\n            </form>\n        );\n    }\n}","import React, {Component} from 'react';\nimport api from '../../services/api';\n\nimport './styles.css';\n\nexport default class Reminder extends Component{\n    state = {\n        reminder: {}\n    }\n    \n    async componentDidMount(){\n\n        const {id} = this.props.match.params;\n\n        const response = await api.get(`reminders/${id}`);\n\n        this.setState({reminder : response.data});\n    }\n\n    render(){\n        const {reminder} = this.state;\n\n        return (\n            <div className=\"reminder-info\">\n                <h1>{reminder.title}</h1>\n                <p>{reminder.description}</p>\n                <p><strong>Created At:</strong> {reminder.createdAt}</p>\n                <p><strong>Period: </strong>{reminder.period}</p>\n            </div>\n        );\n    }\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n`;\n\nexport const Form = styled.form`\n  width: 400px;\n  background: #fff;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  img {\n    width: 100px;\n    margin: 10px 0 40px;\n  }\n  p {\n    color: #ff3333;\n    margin-bottom: 15px;\n    border: 1px solid #ff3333;\n    padding: 10px;\n    width: 100%;\n    text-align: center;\n  }\n  input {\n    flex: 1;\n    height: 46px;\n    margin-bottom: 15px;\n    padding: 0 20px;\n    color: #777;\n    font-size: 15px;\n    width: 100%;\n    border: 1px solid #ddd;\n    &::placeholder {\n      color: #999;\n    }\n  }\n  button {\n    color: #fff;\n    font-size: 16px;\n    background: #6b5b95;\n    height: 56px;\n    border: 0;\n    border-radius: 5px;\n    width: 100%;\n  }\n\n  button:hover {\n    cursor: pointer\n  }\n  \n  hr {\n    margin: 20px 0;\n    border: none;\n    border-bottom: 1px solid #cdcdcd;\n    width: 100%;\n  }\n  a {\n    font-size: 16;\n    font-weight: bold;\n    color: #999;\n    text-decoration: none;\n  }\n`;","import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nimport { login } from \"../../services/auth\";\n\nimport api from \"../../services/api\";\n\nimport Logo from \"../../logo.svg\";\n\nimport { Form, Container } from \"./styles\";\n\nclass SignUp extends Component {\n  state = {\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    error: \"\"\n  };\n\n  render() {\n    return (\n      <Container>\n        <Form onSubmit={this.handleSignUp}>\n          <img src={Logo} alt=\"Airbnb logo\" />\n          {this.state.error && <p>{this.state.error}</p>}\n          <input\n            type=\"text\"\n            placeholder=\"Username\"\n            onChange={e => this.setState({ username: e.target.value })}\n          />\n          <input\n            type=\"email\"\n            placeholder=\"E-mail address\"\n            onChange={e => this.setState({ email: e.target.value })}\n          />\n          <input\n            type=\"password\"\n            placeholder=\"Password\"\n            onChange={e => this.setState({ password: e.target.value })}\n          />\n          <button type=\"submit\">SignUp for Free</button>\n          <hr />\n          <Link to=\"/\">Login</Link>\n        </Form>\n      </Container>\n    );\n  }\n\n  handleSignUp = async e => {\n    e.preventDefault();\n    const { username, email, password } = this.state;\n    if (!username || !email || !password) {\n      this.setState({ error: \"Fill all inputs to sign up\" });\n    } else {\n      try {\n        await api.post(\"/users\", { username, email, password });\n        const response = await api.post(\"/auth\", { email, password });\n        login(response.data.token);\n        this.props.history.push(\"/main\");\n      } catch (err) {\n        console.log(err);\n        this.setState({ error: \"An error ocurred\" });\n      }\n    }\n  };\n}\n\nexport default withRouter(SignUp);","import React from 'react';\nimport {BrowserRouter, Switch, Route, Redirect} from 'react-router-dom';\n\nimport { isAuthenticated } from \"./services/auth\";\n\nimport Main from './pages/main';\nimport Login from './pages/login';\nimport NewReminder from './pages/new-reminder';\nimport Reminder from './pages/reminder';\nimport SignUp from \"./pages/signup\";\n\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n    <Route\n      {...rest}\n      render={props =>\n        isAuthenticated() ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to={{ pathname: \"/\", state: { from: props.location } }} />\n        )\n      }\n    />\n  );\n  \nconst Routes = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route exact path=\"/\" component={Login} />\n            <Route path=\"/signup\" component={SignUp} />\n            <PrivateRoute path=\"/main\" component={Main} />\n            <PrivateRoute path=\"/reminders/new-reminder\" component={NewReminder} />\n            <PrivateRoute path=\"/reminders/:id\" component={Reminder} />\n            <Route path=\"*\" component={() => <h1>Page not found</h1>} />\n        </Switch>\n    </BrowserRouter>\n);\n\nexport default Routes;","import React,{Component} from \"react\";\nimport { createHashHistory } from 'history'\nimport { isAuthenticated, logout } from \"../../services/auth\";\nimport \"./styles.css\";\n\nexport default class Main extends Component{\n\n    state = {\n        loggedIn: false\n    };\n\n    doLogout = () => {\n        logout();\n        this.setState({ loggedIn: false })\n        createHashHistory().push(\"/\");\n        window.location.reload(false);\n    }\n\n    render(){\n\n        if(isAuthenticated()){\n            return(\n                <header >\n                    <div className=\"main-header\">Light My Mind</div>\n                <div className=\"sair\">\n                    <button className=\"sair\" onClick={this.doLogout}>Logout</button>\n                    </div>\n                </header>\n            );\n        }\n        else{\n            return(\n                <header >\n                    <div className=\"main-header\">Light My Mind</div>\n                </header>\n            );\n        }\n    }\n}","import React from 'react';\nimport Routes from './routes';\nimport Header from './components/Header';\nimport \"./styles.css\";\n\nconst App = () => (  \n    <div className=\"App\">\n      <Header />\n      <Routes />\n    </div>\n  );\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}